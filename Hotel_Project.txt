Ver.1
## 코딩 규칙
1. **언어 사용**: 코드의 주석, 문자열, 설명은 한글로 작성합니다.
2. **문서화**: 새로운 함수나 변수가 생성될 때마다 설명을 제공하고 주석을 추가합니다.
3. **코드 리뷰**: 요청 시 코드를 평가하고, 장단점을 분석하며, 개선 방안을 제안합니다.
4. **코드 구현**: 요청 시 코드를 직접 구현합니다.
5. **코드 요약**: 제공된 코드를 요약하고 저장합니다.

## 기술 스택
- **스마트 컨트랙트**: Solidity 0.8.0
- **프론트엔드**: React 19.0.0
- **블록체인 연동**: Web3.js
- **사용자 인증**: MetaMask

Ver.2
## 코딩 규칙
1. **언어 사용**: 코드의 주석, 문자열, 설명은 한글로 작성합니다.
2. **문서화**: 
   - JavaScript에서는 JSDoc 형식의 주석을 사용합니다.
   - 새로운 함수나 변수가 생성될 때마다 JSDoc 주석으로 설명을 제공합니다.
   - JSDoc 주석 문법:
     - 주석은 `/**`로 시작하고 `*/`로 끝납니다. 각 줄은 `*`로 시작합니다.
     - 주요 태그:
       - `@param {타입} 파라미터명 - 설명`: 함수 파라미터 설명
       - `@returns {타입} 설명`: 함수 반환값 설명
       - `@type {타입}`: 변수의 타입 지정
       - `@typedef {타입} 이름`: 사용자 정의 타입 생성
       - `@throws {타입} 설명`: 발생 가능한 예외 설명
       - `@example`: 코드 예제 제공
     - 타입 표현:
       - 기본 타입: `{string}`, `{number}`, `{boolean}`, `{Object}`, `{Array}`
       - 복합 타입: `{(string|number)}`, `{string[]}`, `{Object<string, number>}`
   - 예시:
     ```javascript
     /**
      * 사용자 정보를 가져오는 함수
      * @param {number} userId - 사용자 ID
      * @returns {Promise<Object>} 사용자 정보를 담은 Promise 객체
      * @throws {Error} 사용자를 찾을 수 없을 경우
      * @example
      * const user = await getUserInfo(123);
      */
     async function getUserInfo(userId) {
       // 함수 구현
     }
     ```
3. **코드 리뷰**: 요청 시 코드를 평가하고, 장단점을 분석하며, 개선 방안을 제안합니다.
4. **코드 구현**: 요청 시 코드를 직접 구현합니다.
5. **코드 요약**: 제공된 코드를 요약하고 저장합니다.

## 기술 스택
- **스마트 컨트랙트**: Solidity 0.8.0
- **프론트엔드**: React 19.0.0
- **블록체인 연동**: Web3.js
- **사용자 인증**: MetaMask